// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/box/kube-applier/git

package git

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of GitUtilInterface interface
type MockGitUtilInterface struct {
	ctrl     *gomock.Controller
	recorder *_MockGitUtilInterfaceRecorder
}

// Recorder for MockGitUtilInterface (not exported)
type _MockGitUtilInterfaceRecorder struct {
	mock *MockGitUtilInterface
}

func NewMockGitUtilInterface(ctrl *gomock.Controller) *MockGitUtilInterface {
	mock := &MockGitUtilInterface{ctrl: ctrl}
	mock.recorder = &_MockGitUtilInterfaceRecorder{mock}
	return mock
}

func (_m *MockGitUtilInterface) EXPECT() *_MockGitUtilInterfaceRecorder {
	return _m.recorder
}

func (_m *MockGitUtilInterface) HeadCommitLog() (string, error) {
	ret := _m.ctrl.Call(_m, "HeadCommitLog")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitUtilInterfaceRecorder) HeadCommitLog() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HeadCommitLog")
}

func (_m *MockGitUtilInterface) HeadHash() (string, error) {
	ret := _m.ctrl.Call(_m, "HeadHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockGitUtilInterfaceRecorder) HeadHash() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "HeadHash")
}
